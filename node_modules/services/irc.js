var mixin = require("utils/mixin");


function irc(app, options) {
  options = options || {};
  this.id = 0;
  this.app = app;
  this.messages = {};
  this.server(app);
}


irc.prototype.server = function() {
  var _self = this;
  var app = this.app;


  app.get("/irc/messages", function(req, res) {
    _self.getAllMessages()
      .done(function(messages) {
        res.send(messages);
      });
  });


  app.delete("/irc/messages", function(req, res) {
    res.send(200, "I told you not to call this interface!");
  });


  app.get("/irc/message/:id", function(req, res) {
    _self.getMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.post("/irc/message", function(req, res) {
    _self.createMessage(req.body)
      .done(function(message) {
        res.send(message);
      });
  });


  app.put("/irc/message", function(req, res) {
    _self.updateMessage(req.body)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.delete("/irc/message:id", function(req, res) {
    _self.deleteMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });

};



irc.prototype.getAllMessages = function() {
  var messages = this.messages;
  var result = [];
  for(var i in messages) {
    result.push(messages[i]);
  }
  return result;
};


irc.prototype.deleteAllMessages = function() {
};


irc.prototype.getMessage = function(id) {
  var message = this.messages[id];
};


irc.prototype.createMessage = function(data) {
  var _id = this.id++;
  var message = mixin({
    "id": _id,
    "created": (new Date()).getTime()
  }, data);

  this.messages[_id] = message;
};


irc.prototype.updateMessage = function(data) {
  var id = data.id;
  var messages = this.messages;
  mixin(messages[id], {
    "updated": (new Date()).getTime()
  }, data);
};


irc.prototype.deleteMessage = function(id) {
  var messages = this.messages;
  var message = messages[id];

  if ( message ) {
    delete messages[id];
  }

  return message;
};



module.exports = irc;

var mixin = require("utils/mixin");
var spromise = require("spromise");


function TooSimple(app, options) {
  options = options || {};
  this.id = 0;
  this.app = app;
  this.messages = {};
  this.persistence = options.persistence;
  this.server(app);
}


TooSimple.prototype.server = function() {
  var _self = this;
  var app = this.app;


  app.get("/ts/messages", function(req, res) {
    _self.getAllMessages()
      .done(function(messages) {
        res.send(messages);
      });
  });


  app.delete("/ts/messages", function(req, res) {
    res.send(200, "I told you not to call this interface!");
  });


  app.get("/ts/message/:id", function(req, res) {
    _self.getMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.post("/ts/message", function(req, res) {
    _self.createMessage(req.body)
      .done(function(message) {
        res.send(message);
      });
  });


  app.put("/ts/message", function(req, res) {
    _self.updateMessage(req.body)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.delete("/ts/message:id", function(req, res) {
    _self.deleteMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });

};


TooSimple.prototype.getAllMessages = function() {
  var persistence = this.persistence;
  return spromise(function(resolve, reject) {
    persistence.messages.find({}, function (err, messages) {
      //console.log(err);
      if (err) {
        reject(err);
      }
      else {
        resolve(messages);
      }
    });
  });
};


TooSimple.prototype.deleteAllMessages = function() {
  return spromise(function(resolve, reject) {
    reject();
  });
};


TooSimple.prototype.getMessage = function(id) {
  var persistence = this.persistence;
  return spromise(function(resolve, reject) {
    persistence.messages.findOne({"id": id}, function (err, message) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
};


TooSimple.prototype.createMessage = function(data) {
  var persistence = this.persistence;
  var id = this.id++;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "id": id,
      "created": (new Date()).getTime()
    }, data);

    persistence.messages.insert(message, function(err, nmessage) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(nmessage);
      }
    });
  });
};


TooSimple.prototype.updateMessage = function(data) {
  var persistence = this.persistence;
  var id = data.id;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "updated": (new Date()).getTime()
    }, data);

    persistence.messages.update({"id": id}, message, {}, function(err /*, numReplaced*/) {
      //console.log(err, numReplaced);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
};


TooSimple.prototype.deleteMessage = function(id) {
  var persistence = this.persistence;
  return spromise(function(resolve, reject) {
    persistence.messages.remove({"id": id}, {}, function(err /*, numRemoved*/) {
      //console.log(err, numRemoved);
      if ( err ) {
        reject( err );
      }
      else {
        resolve();
      }
    });
  });
};


module.exports = TooSimple;
